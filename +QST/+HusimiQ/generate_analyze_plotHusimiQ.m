function [] = generate_analyze_plotHusimiQ(X1,X2,Resolution,Limits,Options)
% This function creates first the HusimiQ distribution from a set of orthogonal quadrature pairs X1,X2.
% Orthogonal means <X1X2> = 0.Then it also plots the results.

arguments
    X1;
    X2;
    Resolution = 0.05;
    Limits=[-10,10];
    Options.Edges1 = [];
    Options.Edges2 = [];
    Options.MonteCarloError = false;
    Options.nMonteCarloIterations = 1000;
    Options.FitMethod = 'NLSQ-LAR';
    Options.FitFunction = '';
    Options.ShowLegend = true;
    Options.PlotsSaveDir = '';
    Options.PlotsSaveName = '';
    Options.ResultsSaveFile = '';
    Options.ResultsSaveVariableName = 'Results_HusimiQ';
end

%% 1.  Calculate the Husimi Q Distribution and analyze its properties

 [BinsQ,...
 BinsP,...
 HusimiQ,...
 Radius,...
 nTherm,...
 nThermErr,...
 nCoherent,...
 nCoherentErr,...
 nMean,...
 nMeanErr,...
 nRatio,...
 nRatioErr,...
 G2,...
 G2Err,...
 Coherence,...
 CoherenceErr,...
 poissonErrors,...
 poissonErrorsCut,...
 HusimiCut,...
 HusimiCut_Theory,...
 radMean] = QST.HusimiQ.generate_analyzeHusimiQ(X1,...
                                                X2,...
                                                Resolution,...
                                                Limits,...
                                                Edges1=Options.Edges1,...
                                                Edges2=Options.Edges2,...
                                                MonteCarloError=Options.MonteCarloError,...
                                                nMonteCarloIterations=Options.nMonteCarloIterations,...
                                                FitMethod=Options.FitMethod);

%% 2. Plot the 2D Distribution  
QST.HusimiQ.Plot.plotHusimiQ_2D(BinsQ,...
                                BinsP,...
                                HusimiQ,...
                                Resolution,...
                                Options.FitMethod,...
                                Options.PlotsSaveDir,...
                                Options.PlotsSaveName, ...
                                ShowLegend=Options.ShowLegend, ...
                                nTherm=nTherm,...
                                nThermErr=nThermErr,...
                                nCoherent=nCoherent,...
                                nCoherentErr=nCoherentErr,...
                                G2=G2,...
                                G2Err=G2Err,...
                                Coherence=Coherence,...
                                CoherenceErr=CoherenceErr);


%% 3. Plot the 1D Cut along the p=0 axis 
QST.HusimiQ.Plot.plotHusimiQ_1DCut(BinsQ,...
                                   HusimiCut,...
                                   HusimiCut_Theory,...
                                   poissonErrorsCut,...
                                   Resolution,...
                                   Options.FitMethod,...
                                   nTherm,...
                                   nCoherent,...
                                   Limits,...
                                   Options.PlotsSaveDir,...
                                   Options.PlotsSaveName);

%% 4. Save the Results
if ~isempty(Options.ResultsSaveFile) && ~isempty(Options.ResultsSaveVariableName) % one can improve this function further so it can first check if there is already a Resultstruct or to handle multiple Results in one struct
    SaveStruct.HusimiQ = HusimiQ;
    SaveStruct.BinsQ = BinsQ;
    SaveStruct.BinsP = BinsP;
    SaveStruct.Radius = Radius;
    SaveStruct.nTherm = nTherm;
    SaveStruct.nThermErr = nThermErr;
    SaveStruct.nCoherent = nCoherent;
    SaveStruct.nCoherentErr = nCoherentErr;
    SaveStruct.nMean = nMean;
    SaveStruct.nMeanErr = nMeanErr;
    SaveStruct.nRatio = nRatio;
    SaveStruct.nRatioErr = nRatioErr;
    SaveStruct.G2 = G2;
    SaveStruct.G2Err = G2Err;
    SaveStruct.Coherence = Coherence;
    SaveStruct.CoherenceErr = CoherenceErr;
    SaveStruct.poissonErrors = poissonErrors;
    SaveStruct.poissonErrorsCut = poissonErrorsCut;
    SaveStruct.HusimiCut_Theory = HusimiCut_Theory;
    SaveStruct.radMean = radMean;

    eval([Options.ResultsSaveVariableName '= SaveStruct;']); % bad design
    save(Options.ResultsSaveFile,Options.ResultsSaveVariableName, '-append');
end
end

