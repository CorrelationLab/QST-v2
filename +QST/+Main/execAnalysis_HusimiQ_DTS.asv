function [SaveStruct] = execAnalysis_HusimiQ_DTS(Options)
% function that executes all necessary steps to generate an Husimi Q function from a dataset defined by either Indices of Edgeindices,
% and analyzes the returned distribution then in the model of a displaced thermal state
arguments
    % Options for the quadratures and their indices
    Options.X1 = [];
    Options.X2 = [];
    Options.X1_Indices = [];
    Options.X2_Indices = [];
    Options.X1_EdgeIndices = [];
    Options.X2_EdgeIndices = [];
    Options.FilePath = '';
    Options.X1String = '';
    Options.X2String = '';
    Options.X1_IndicesString = '';
    Options.X2_IndicesString = '';
    Options.X1_EdgeIndicesString = '';
    Options.X2_EdgeIndicesString = '';
    % Options for quadrature rescaling
    Options.ScaleChannels = true;
    % Options for the generation of the Husimi Q distribution 
    Options.Limits_Q = [-10,10];
    Options.Limits_P = [-10,10];
    Options.Resolution = 0.1;
    % Options for the PDTS analysis
    Options.MonteCarloError = true;
    Options.nMonteCarloIterations = 1000;
    Options.FitMethod = 'NLSQ-LAR';
    %Options for the plots
    Options.FigureSaveDir = '';
    Options.SaveFigure = true;
    Options.plot2D = true;
    Options.FigureSaveName_2D = 'HusimiQ-2D';
    Options.ShowColorBar_2D = true;
    Options.ShowLegend_2D = true;
    Options.plot1D = true;
    Options.FigureSaveName_1D = 'HusimiQ-1D';
    Options.ShowLegend_1D = true;                                 
    % save the results
    Options.SaveResults = false;
    Options.ResultSaveDir = '';
    Options.ResultSaveName = '';
    Options.ResultSaveVariable = 'Results_HusimiQ';


end



    %% 1. load the selected quadrature subset
    [X1,X2] = QST.HusimiQ.Prepare.prepareDataSubSetForHusimiQ(X1=Options.X1,...
                                                              X2=Options.X2,...
                                                              X1_Indices=Options.X1_Indices,...
                                                              X2_Indices=Options.X2_Indices,...
                                                              X1_EdgeIndices=Options.X1_EdgeIndices,...
                                                              X2_EdgeIndices=Options.X2_EdgeIndices,...
                                                              FilePath=Options.FilePath,...
                                                              X1String=Options.X1String,...
                                                              X2String=Options.X2String,...
                                                              X1_IndicesString=Options.X1_IndicesString,...
                                                              X2_IndicesString=Options.X2_IndicesString,...
                                                              X1_EdgeIndicesString=Options.X1_EdgeIndicesString,...
                                                              X2_EdgeIndicesString=Options.X2_EdgeIndicesString);
    
    %% 2. rescale the quadratures to the point before the last beamsplitter and fix differences in the photon numbers
    [X1,X2] = QST.HusimiQ.Prepare.rescaleQuadsForHusimiQ(X1,X2,ScaleChannels=Options.ScaleChannels);
    
    %% 3. generate the husimi Q distribution
    [HusimiQ,...
     Bins_Q,...
     Bins_P,...
     Edges_Q,...
     Edges_P] = QST.HusimiQ.Generate.generateHusimiQ(X1,...
                                                     X2,...
                                                     Limits_Q = Options.Limits_Q,...
                                                     Limits_P=Options.Limits_P,...
                                                     Resolution=Options.Resolution);

    % save the results into the struct
    SaveStruct.HusimiQ = HusimiQ;
    SaveStruct.Bins_Q = Bins_Q;
    SaveStruct.Bins_P = Bins_P;
    SaveStruct.Edges_Q = Edges_Q;
    SaveStruct.Edges_P = Edges_P;


    %% 4. analyze the Husimi Q distribution in the model of the displaced thermal state, state needs to be phaseaveraged

   [nCoherent,...
    nCoherentErr,...
    nTherm,...
    nThermErr,...
    nMean,...
    nMeanErr,...
    nRatio,...
    nRatioErr,...
    G2,...
    G2Err,...
    Coherence,...
    CoherenceErr,...
    PoissonError,...
    PoissonErrorCut,...
    HusimiCut,...
    HusimiCutTheory] = QST.HusimiQ.Analyze.analyzeHusimiQ_PDTS_Main(Bins_Q,...
                                                                    HusimiQ,...
                                                                    Options.Resolution,...
                                                                    length(X1),...
                                                                    MonteCarloError=Options.MonteCarloError,...
                                                                    nMonteCarloIterations=Options.nMonteCarloIterations,...
                                                                    FitMethod=Options.FitMethod);


   % save the results from the PDTS analysis into the savestruct
    SaveStruct.nTherm = nTherm;
    SaveStruct.nThermErr = nThermErr;
    SaveStruct.nCoherent = nCoherent;
    SaveStruct.nCoherentErr = nCoherentErr;
    SaveStruct.nMean = nMean;
    SaveStruct.nMeanErr = nMeanErr;
    SaveStruct.nRatio = nRatio;
    SaveStruct.nRatioErr = nRatioErr;
    SaveStruct.G2 = G2;
    SaveStruct.G2Err = G2Err;
    SaveStruct.Coherence = Coherence;
    SaveStruct.CoherenceErr = CoherenceErr;
    SaveStruct.PoissonError = PoissonError;
    SaveStruct.PoissonErrorCut = PoissonErrorCut;
    SaveStruct.HusimiCut = HusimiCut;
    SaveStruct.HusimiCutTheory = HusimiCutTheory;


    %% 5. Plot the 2D Distribution
    if Options.plot2D
        QST.HusimiQ.Plot.plotHusimiQ_2D(Bins_Q,...
                                        Bins_P,...
                                        HusimiQ,...
                                        SaveFigure=Options.SaveFigure,...
                                        SaveDir=Options.FigureSaveDir,...
                                        SaveName = Options.SaveFigureName_2D,...
                                        FitMethod=Options.FitMethod,...
                                        ShowColorBar=Options.ShowColorBar_2D,...
                                        ShowLegend=Options.ShowLegend_2D,...
                                        nTherm=nTherm,...
                                        nThermErr=nThermErr,...
                                        nCoherent=nCoherent,...
                                        nCoherentErr=nCoherentErr,...
                                        G2=G2,...
                                        G2Err=G2Err,...
                                        Coherence=Coherence,...
                                        CoherenceErr=CoherenceErr);
    end
    

    %% 6. Plot the 1D Cut along the P=0 axis
    if Options.plot1D
        QST.HusimiQ.Plot.plotHusimiQ_1DCut(Bins_Q,...
                                           HusimiCut,...
                                           HusimiCutTheory,...
                                           PoissonErrorCut,...
                                           SaveFigure=Options.SaveFigure,...
                                           SaveDir=Options.SaveDir,...
                                           SaveName=Options.SaveFigureName_1D,...
                                           ShowLegend=Options.ShowLegend_1D,...
                                           FitMethod=Options.FitMethod,...
                                           nTherm=nTherm,...
                                           nCoherent=nCoherent);
    end

    %% 7. Save the Results
    if Options.SaveResults
        SavePath = fullfile(Options.SaveDir,Options.SaveName);
        eval([Options.ResultVariable '= SaveStruct;']); % rename the Variable . This is a bad design
        save(SavePath,Options.SavedResultVariable, '-append');
    end
end